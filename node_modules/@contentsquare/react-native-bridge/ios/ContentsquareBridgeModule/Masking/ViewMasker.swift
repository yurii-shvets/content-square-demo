import WebKit;
import ContentsquareModule;

@objc
protocol _ViewMasker {
    
    func maskView(withTag reactTag:NSNumber,
                       in uiManager:_RCTUIManager)
    func unmaskView(withTag reactTag:NSNumber,
                                  in uiManager:_RCTUIManager)
}

class ViewMasker: NSObject {
    
    let viewFinder: _ViewFinder
    let contentsquareType: _Contentsquare.Type
    
    @objc
    public init(_ contentsquareType: _Contentsquare.Type = Contentsquare.self,
                viewFinder: _ViewFinder = ViewFinder()) {
        self.viewFinder = viewFinder
        self.contentsquareType = contentsquareType
    }
}

extension ViewMasker: _ViewMasker {
    
    @objc
    func maskView(withTag reactTag:NSNumber,
                       in uiManager:_RCTUIManager) {
        viewFinder.findView(withTag: reactTag,
                                 in: uiManager) { [weak self] view in
            if let view = view {
                self?.contentsquareType.mask(view: view)
            }
        }
    }
    
    @objc
    func unmaskView(withTag reactTag:NSNumber,
                                  in uiManager:_RCTUIManager) {
        viewFinder.findView(withTag: reactTag,
                               in: uiManager) { [weak self] view in
            if let view = view {
                self?.contentsquareType.unmask(view: view)
            }
        }
    }
}
