import WebKit;
import ContentsquareModule;

@objc
protocol _WebViewInjector {
    
    func injectWebview(withTag webViewTag:NSNumber,
                       in uiManager:_RCTUIManager)
    func removeInjectionInWebView(withTag webViewTag:NSNumber,
                                  in uiManager:_RCTUIManager)
}

class WebViewInjector: NSObject {
    
    let viewFinder: _ViewFinder
    let contentsquareType: _Contentsquare.Type
    
    @objc
    public init(_ contentsquareType: _Contentsquare.Type = Contentsquare.self,
                viewFinder: _ViewFinder = ViewFinder()) {
        self.viewFinder = viewFinder
        self.contentsquareType = contentsquareType
    }
}

extension WebViewInjector: _WebViewInjector {
    
    @objc
    func injectWebview(withTag webViewTag:NSNumber,
                       in uiManager:_RCTUIManager) {
        viewFinder.findWKWebView(withTag: webViewTag,
                                 in: uiManager) { [weak self] webView in
            if let webView = webView {
                self?.contentsquareType.register(webView: webView)
            }
        }
    }
    
    @objc
    func removeInjectionInWebView(withTag webViewTag:NSNumber,
                                  in uiManager:_RCTUIManager) {
        viewFinder.findWKWebView(withTag: webViewTag,
                               in: uiManager) { [weak self] webView in
            if let webView = webView {
                self?.contentsquareType.unregister(webView: webView)
            }
        }
    }
}
