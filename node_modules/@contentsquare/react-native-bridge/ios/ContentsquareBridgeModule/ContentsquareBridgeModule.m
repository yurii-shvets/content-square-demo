
//framework import
@import ContentsquareModule;
#import <React/RCTUIManager.h>
#import <React/RCTBridgeModule.h>

//header file import
#import "ContentsquareBridgeModule.h"
#import "CurrencyHelper.h"

#if __has_include("ContentsquareBridgeModule-Swift.h")
#import "ContentsquareBridgeModule-Swift.h"
#elif __has_include("ContentsquareBridgeModule/ContentsquareBridgeModule-Swift.h")
#import "ContentsquareBridgeModule/ContentsquareBridgeModule-Swift.h"
#endif

@implementation ContentsquareBridgeModule {
    __strong ContentsquareSDKInterface* contentsquareSDKInterface;
}

- (instancetype)init {
    self = [super init];
    if (self) {
        contentsquareSDKInterface = [[ContentsquareSDKInterface alloc] init];
    }
    return self;
}


#pragma mark - React Native requirements

@synthesize bridge = _bridge;

- (dispatch_queue_t)methodQueue {
    return dispatch_get_main_queue();
}

/*
 * Used for Bridge init
 * cf https://reactnative.dev/docs/native-modules-ios#exporting-constants
 */
+ (BOOL)requiresMainQueueSetup {
    return YES;
}

- (NSDictionary *)constantsToExport {
    return CurrencyHelper.currencyConstants;
}


#pragma mark - Bridge API

RCT_EXPORT_MODULE(ContentsquareModule)

RCT_EXPORT_METHOD(start) {
    [contentsquareSDKInterface start];
}

RCT_EXPORT_METHOD(stopTracking) {
    [contentsquareSDKInterface stopTracking];
}

RCT_EXPORT_METHOD(resumeTracking) {
    [contentsquareSDKInterface resumeTracking];
}

RCT_EXPORT_METHOD(optIn) {
    [contentsquareSDKInterface optIn];
}

RCT_EXPORT_METHOD(optOut) {
    [contentsquareSDKInterface optOut];
}

RCT_EXPORT_METHOD(forgetMe) {
    [contentsquareSDKInterface forgetMe];
}

RCT_EXPORT_METHOD(handleUrl:(NSString *)urlString) {
    if (!urlString) {
        return;
    }
    NSURL* url = [NSURL URLWithString:urlString];
    [contentsquareSDKInterface handleWithUrl:url];
}

RCT_EXPORT_METHOD(getCurrentSessionReplayLink:(RCTResponseSenderBlock)callback) {
    NSURL* url = contentsquareSDKInterface.currentSessionReplayLink;
    if (url) {
        NSString* currentSessionReplayLink = url.absoluteString;
        callback(@[currentSessionReplayLink]);
    } else {
        callback(nil);
    }
}

RCT_EXPORT_METHOD(send:(NSString *)name
                  cvars: (NSArray *)cvars) {
    [contentsquareSDKInterface sendWithScreenViewWithName:name
                                                    cvars:cvars];
}

RCT_EXPORT_METHOD(getUserId:(RCTResponseSenderBlock)callback) {
    NSString *userID = contentsquareSDKInterface.userID;
    if (userID) {
        callback(@[userID]);
    } else {
        callback(nil);
    }
}

RCT_EXPORT_METHOD(sendTransaction:(NSString*)identifier
                  value:(float)value
                  currency:(NSInteger)currency) {
    [contentsquareSDKInterface sendWithTransactionId:identifier
                                               value:value
                                            currency:currency];
}

RCT_EXPORT_METHOD(sendTransactionWithStringCurrency:(NSString*)identifier
                  value:(float)value currency:(NSString*)currency) {
    [contentsquareSDKInterface sendWithTransactionId:identifier
                                               value:value
                                      stringCurrency:currency];
}

RCT_EXPORT_METHOD(sendDynamicStringVar:(NSString *)key
                  :(NSString *)value) {
    [contentsquareSDKInterface sendWithDynamicVar:key
                                      stringValue:value];
}

RCT_EXPORT_METHOD(sendDynamicIntVar:(NSString *)key
                  :(NSUInteger)value) {
    [contentsquareSDKInterface sendWithDynamicVar:key
                                         intValue:(UInt32)value];
}

RCT_EXPORT_METHOD(injectWebView:(NSInteger)webViewTag) {
    [contentsquareSDKInterface injectWebViewWithTag:@(webViewTag)
                                                 in:_bridge.uiManager];
}

RCT_EXPORT_METHOD(removeWebViewInjection:(NSInteger)webViewTag) {
    [contentsquareSDKInterface removeInjectionInWebViewWithTag:@(webViewTag)
                                                            in:_bridge.uiManager];
}

RCT_EXPORT_METHOD(initComponents:(NSDictionary*)params) {
    [contentsquareSDKInterface initComponentsWithParams:params];
}

RCT_EXPORT_METHOD(maskView:(NSInteger)viewTag) {
    [contentsquareSDKInterface maskViewWithTag:@(viewTag)
                                            in:_bridge.uiManager];
}

RCT_EXPORT_METHOD(unmaskView:(NSInteger)viewTag) {
    [contentsquareSDKInterface unmaskViewWithTag:@(viewTag)
                                              in:_bridge.uiManager];
}

RCT_EXPORT_METHOD(setDefaultMasking:(BOOL)isMasking) {
    [contentsquareSDKInterface setDefaultMaskingWithIsMasking:isMasking];
}

RCT_EXPORT_METHOD(sendUserIdentifier:(NSString *)userIdentifier){
    [contentsquareSDKInterface sendUserIdentifier:userIdentifier];
}
@end

