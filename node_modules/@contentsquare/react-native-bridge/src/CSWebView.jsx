import React, { useEffect, useRef, useState } from 'react';
import { DeviceEventEmitter, Platform, View } from 'react-native';
import { injectWebView, removeWebViewInjection } from './webView';

export const CSWebView = ({ renderWebView, source, url }) => {
  const nativeTag = useRef();
  const injectedWebViewTag = useRef();
  // TODO: Refactor in next major version
  const constructSource = () => {
    return url ? { uri: url } : source;
  };

  const initialSource = Platform.OS === 'ios' ? constructSource() : {};
  const [currentSource, setCurrentSource] = useState(initialSource);

  const onTagInjected = () => {
    injectedWebViewTag.current = nativeTag.current;
    setCurrentSource(constructSource());
  };

  useEffect(() => {
    let onCSWebViewInjectedListener;
    if (Platform.OS === 'android') {
      onCSWebViewInjectedListener = DeviceEventEmitter.addListener(
        'onCSWebViewInjected',
        () => {
          onTagInjected();
        }
      );
    }

    return () => {
      if (onCSWebViewInjectedListener) {
        onCSWebViewInjectedListener.remove();
      }
      if (injectedWebViewTag.current !== undefined) {
        removeWebViewInjection(injectedWebViewTag.current);
      }
    };
  }, []);

  useEffect(() => {
    if (injectedWebViewTag.current) {
      // Update url only after the webView has been injected
      setCurrentSource(constructSource());
    }
  }, [source, url]);

  const onLayout = event => {
    nativeTag.current = event.nativeEvent.target;
    if (nativeTag.current && nativeTag.current !== injectedWebViewTag.current) {
      injectWebView(nativeTag.current);

      if (Platform.OS === 'ios') {
        onTagInjected();
      }
    }
  };

  return (
    <View style={{ flex: 1 }}>
      {url
        ? renderWebView(onLayout, currentSource?.uri)
        : renderWebView(onLayout, currentSource)}
    </View>
  );
};
