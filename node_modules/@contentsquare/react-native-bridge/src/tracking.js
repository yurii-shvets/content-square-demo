import { ContentsquareModule } from './nativeModules';
import { initComponents } from './utils';

/**
 * Re-enables the Contentsquare UX tracking SDK.
 */
export const resumeTracking = () => {
  ContentsquareModule.resumeTracking();
};

/**
 * Stops the Contentsquare UX tracking SDK.
 * Once this is called the SDK will completely stop.
 */
export const stopTracking = () => {
  ContentsquareModule.stopTracking();
};

/**
 * Sends a ScreenName for a CustomScreenView Event to Contentsquare tracking
 * services.
 *
 * @param {string} screenName.
 * @param {CustomVar[]} cvars (optional parameter)
 */
export const send = (screenName, cvars) => {
  ContentsquareModule.send(screenName, cvars);
  initComponents();
};

/**
 * Sends a transaction event to Contentsquare tracking services.
 *
 * @param {number} value
 * @param {Currency} currency
 * @param {string} id (optional parameter)
 */
export const sendTransaction = (value, currency, id = null) => {
  ContentsquareModule.sendTransaction(id, value, currency);
};

/**
 * Sends a transaction event to Contentsquare tracking services.
 *
 * @param {number} value
 * @param {string} currencyString
 * @param {string} id (optional parameter)
 */
export const sendTransactionWithStringCurrency = (
  value,
  currency,
  id = null
) => {
  ContentsquareModule.sendTransactionWithStringCurrency(id, value, currency);
};

/**
 * Sends a (key, value) pair, called DynamicVar, to Contentsquare tracking services.
 *
 * @param {string} key
 * @param {string | number} value
 * @param {(error) => void} onError
 */
export const sendDynamicVar = (key, value, onError) => {
  if (typeof value === 'string') {
    ContentsquareModule.sendDynamicStringVar(key, value);
  } else if (Number.isInteger(value) && value >= 0) {
    ContentsquareModule.sendDynamicIntVar(key, value);
  } else {
    let callbackError = TypeError(
      'The value of the DynamicVar should be either a string or an unsigned integer'
    );
    if (typeof onError === 'function') {
      onError(callbackError);
    } else {
      console.log(callbackError.message);
    }
  }
};
