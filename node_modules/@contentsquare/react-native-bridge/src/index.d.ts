export default Contentsquare;
declare namespace Contentsquare {
  function start(): void;

  function resumeTracking(): void;
  function stopTracking(): void;
  function send(screenName: string, cvars?: CustomVar[]): void;
  function sendTransaction(
    value: number,
    currency: Currency,
    id?: string
  ): void;
  function sendTransactionWithStringCurrency(
    value: number,
    currency: string,
    id?: string
  ): void;
  function sendDynamicVar(
    key: string,
    value: string | number,
    onError?: (error: Error) => void
  ): void;
  function handleUrl(urlString: string | null | undefined): void;
  function getCurrentSessionReplayLink(): Promise<string | null>;
  function setDefaultMasking(masked: boolean): void;

  // GDPR
  function getUserId(onUserIdObtained: (userId: string) => void): void;
  function optIn(): void;
  function optOut(): void;
  function forgetMe(): void;

  function sendUserIdentifier(userIdentifier: string): void;
}

export type CustomVar = {
  index: number;
  key: string;
  value: string;
};

export const CSMask: React.FC<{
  isMasking?: boolean;
  children: React.ReactNode;
}>;

export type RenderWebView = (
  onLayout: (event) => void,
  source: any
) => React.ReactNode;

// NOTE: This is code from react-native-webview:
// https://github.com/react-native-webview/react-native-webview/blob/master/src/WebViewTypes.ts
/* eslint-disable */
export interface WebViewSourceUri {
  uri: string;
  method?: string;
  headers?: Object;
  body?: string;
}

export interface WebViewSourceHtml {
  html: string;
  baseUrl?: string;
}
/* eslint-enable */

export type CSWebViewSource = WebViewSourceUri | WebViewSourceHtml;

export interface CSWebViewUrlProps {
  renderWebView: RenderWebView;
  url: string;
  source?: CSWebViewSource;
}

export interface CSWebViewSourceProps {
  renderWebView: RenderWebView;
  source: CSWebViewSource;
  url?: string;
}

export type CSWebViewProps = CSWebViewSourceProps | CSWebViewUrlProps;

export const CSWebView: React.FC<CSWebViewProps>;

export const CSReliableTarget: React.FC<{
  name: string;
  children: React.ReactNode;
}>;

export declare namespace ErrorAnalysis {
  function setURLMaskingPatterns(patterns: string[]): void;
}

export enum Currency {
  AFN,
  EUR,
  ALL,
  DZD,
  USD,
  AOA,
  XCD,
  ARS,
  AMD,
  AWG,
  AUD,
  AZN,
  BSD,
  BHD,
  BDT,
  BBD,
  BYN,
  BZD,
  XOF,
  BMD,
  INR,
  BTN,
  BOB,
  BOV,
  BAM,
  BWP,
  NOK,
  BRL,
  BND,
  BGN,
  BIF,
  CVE,
  KHR,
  XAF,
  CAD,
  KYD,
  CLP,
  CLF,
  CNY,
  COP,
  COU,
  KMF,
  CDF,
  NZD,
  CRC,
  HRK,
  CUP,
  CUC,
  ANG,
  CZK,
  DKK,
  DJF,
  DOP,
  EGP,
  SVC,
  ERN,
  ETB,
  FKP,
  FJD,
  XPF,
  GMD,
  GEL,
  GHS,
  GIP,
  GTQ,
  GBP,
  GNF,
  GYD,
  HTG,
  HNL,
  HKD,
  HUF,
  ISK,
  IDR,
  XDR,
  IRR,
  IQD,
  ILS,
  JMD,
  JPY,
  JOD,
  KZT,
  KES,
  KPW,
  KRW,
  KWD,
  KGS,
  LAK,
  LBP,
  LSL,
  ZAR,
  LRD,
  LYD,
  CHF,
  MOP,
  MKD,
  MGA,
  MWK,
  MYR,
  MVR,
  MRU,
  MUR,
  XUA,
  MXN,
  MXV,
  MDL,
  MNT,
  MAD,
  MZN,
  MMK,
  NAD,
  NPR,
  NIO,
  NGN,
  OMR,
  PKR,
  PAB,
  PGK,
  PYG,
  PEN,
  PHP,
  PLN,
  QAR,
  RON,
  RUB,
  RWF,
  SHP,
  WST,
  STN,
  SAR,
  RSD,
  SCR,
  SLL,
  SGD,
  XSU,
  SBD,
  SOS,
  SSP,
  LKR,
  SDG,
  SRD,
  SZL,
  SEK,
  CHE,
  CHW,
  SYP,
  TWD,
  TJS,
  TZS,
  THB,
  TOP,
  TTD,
  TND,
  TRY,
  TMT,
  UGX,
  UAH,
  AED,
  USN,
  UYU,
  UYI,
  UZS,
  VUV,
  VEF,
  VND,
  YER,
  ZMW,
  ZWL,
  XBA,
  XBB,
  XBC,
  XBD,
  XTS,
  XXX,
  XAU,
  XPD,
  XPT,
  XAG,
}
