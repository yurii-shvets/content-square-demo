import React, { useEffect, useLayoutEffect, useRef, useState } from 'react';
import { NativeModules, Platform, View } from 'react-native';

const { ContentsquareModule } = NativeModules;

export const CSMask = ({ isMasking = true, children }) => {
  const [refs, setRefs] = useState([]);
  // for some reason, sometimes (e.g. FlatList) don't have a _nativeTag not until it's wrapped by a View
  const containerRef = useRef(null);

  useLayoutEffect(() => {
    setRefs(React.Children.map(children, () => React.createRef()));
  }, [children]);

  const hasChildComponent = component =>
    component._children &&
    component._children.length > 0 &&
    (component._children._nativeTag !== undefined ||
      component?._children?.find(child => child?._nativeTag));

  const applyMaskingOnLeaves = (wrapper, container) => {
    if (wrapper && wrapper._children) {
      wrapper._children.forEach(child => {
        if (hasChildComponent(child)) {
          applyMaskingOnLeaves(child);
        } else {
          const { _nativeTag: tag } = child;
          if (isMasking) {
            ContentsquareModule.maskView(tag || wrapper._nativeTag);
          } else {
            ContentsquareModule.unmaskView(tag || wrapper._nativeTag);
          }
        }
      });
    } else if (container.current) {
      applyMaskingOnLeaves(container.current);
    }
  };

  const applyMaskingOnView = wrapper => {
    if (wrapper && wrapper._nativeTag) {
      const { _nativeTag: tag } = wrapper;
      if (isMasking) {
        ContentsquareModule.maskView(tag);
      } else if (isMasking === false) {
        ContentsquareModule.unmaskView(tag);
      }
    }
  };

  useEffect(() => {
    if (refs && refs.length > 0) {
      refs.forEach(ref => {
        const { current: wrapper } = ref;
        if (wrapper) {
          if (Platform.OS === 'ios') {
            applyMaskingOnView(wrapper);
          } else if (Platform.OS === 'android') {
            applyMaskingOnLeaves(wrapper, containerRef);
          }
        }
      });
    }
  }, [isMasking, refs, containerRef]);

  return (
    <View ref={containerRef}>
      {React.Children.map(children, (child, index) =>
        React.cloneElement(child, { ref: refs[index] })
      )}
    </View>
  );
};
