package com.contentsquare.rn;

import static com.contentsquare.rn.utils.MapUtil.convertAndAddToCustomVarList;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.contentsquare.android.Contentsquare;
import com.contentsquare.android.api.model.CustomVar;
import com.contentsquare.android.api.model.Transaction;
import com.contentsquare.rn.masking.ViewMasker;
import com.contentsquare.rn.webview.WebViewInjector;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.bridge.ReadableMapKeySetIterator;
import com.facebook.react.bridge.ReadableType;

import android.util.Log;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import android.os.Handler;
import android.os.Looper;

public class ContentsquareModule extends ReactContextBaseJavaModule {
    private Handler mainHandler;
    @NonNull
    private final ReactApplicationContext mReactContext;
    @NonNull
    private final WebViewInjector mWebViewInjector;
    @NonNull
    private final ViewMasker mViewMasker;

    ContentsquareModule(@NonNull final ReactApplicationContext reactContext, @NonNull final WebViewInjector webViewInjector, @NonNull final ViewMasker viewMasker) {
        super(reactContext);
        mReactContext = reactContext;
        mWebViewInjector = webViewInjector;
        mViewMasker = viewMasker;
        mainHandler = new Handler(Looper.getMainLooper());
    }

    @NonNull
    @Override
    public String getName() {
        return "ContentsquareModule";
    }

    @ReactMethod
    public void start() {
        //  ensuring that start() method is executed on the main thread
        mainHandler.post(new Runnable() {
            @Override
            public void run() {
                Contentsquare.start(mReactContext);
            }
        });
    }

    @ReactMethod
    public void send(String screenView, ReadableArray customVars) {
        if (customVars == null) {
            Contentsquare.send(screenView);
            return;
        }
        List<CustomVar> customVarList = new ArrayList<>();

        for (int i = 0; i < customVars.size(); i++) {
            ReadableType type = customVars.getType(i);
            if (type == ReadableType.Map) {
                convertAndAddToCustomVarList(customVars.getMap(i), customVarList);
            } else {
                Log.i("CSLIB", "The provided Custom Var does not match the expected format type.");
            }
        }
        CustomVar[] customVarsArray = customVarList.toArray(new CustomVar[0]);
        Contentsquare.send(screenView, customVarsArray);
    }

    @ReactMethod
    public void optIn() {
        Contentsquare.optIn(mReactContext);
    }

    @ReactMethod
    public void optOut() {
        Contentsquare.optOut(mReactContext);
    }

    @ReactMethod
    public void forgetMe() {
        Contentsquare.forgetMe();
    }

    @ReactMethod
    public void setDefaultMasking(boolean isMasking) {
        Contentsquare.setDefaultMasking(isMasking);
    }

    @ReactMethod
    public void sendTransaction(@Nullable String id, float value, int currency) {
        Transaction.TransactionBuilder tb = Transaction.builder(value, currency);
        if (id != null) {
            tb.id(id);
        }
        Contentsquare.send(tb.build());
    }

    @ReactMethod
    public void sendTransactionWithStringCurrency(@Nullable String id, float value, @NonNull String currency) {
        Transaction.TransactionBuilder tb = Transaction.builder(value, currency);
        if (id != null) {
            tb.id(id);
        }
        Contentsquare.send(tb.build());
    }

    @ReactMethod
    public void sendDynamicStringVar(@NonNull String key, @NonNull String value) {
        Contentsquare.send(key, value);
    }

    @ReactMethod
    public void sendDynamicIntVar(@NonNull String key, int value) {
        Contentsquare.send(key, value);
    }

    @ReactMethod
    public void stopTracking() {
        Contentsquare.stopTracking();
    }

    @ReactMethod
    public void resumeTracking() {
        Contentsquare.resumeTracking();
    }

    @ReactMethod
    public void getUserId(Callback cb) {
        cb.invoke(Contentsquare.getUserId());
    }

    @ReactMethod
    public void getCurrentSessionReplayLink(Callback cb) {
        String link = Contentsquare.currentSessionReplayLink();
        if (link == null || link.equals("INACTIVE")) {
            cb.invoke((Object) null);
        } else {
            cb.invoke(link);
        }
    }

    @ReactMethod
    public void initComponents(@NonNull ReadableMap params) {
        try {
            Class<?> interfaceClass = Class.forName("com.contentsquare.android.api.bridge.telemetry.TelemetryInterface");
            Object interfaceObj = interfaceClass.newInstance();

            ReadableMapKeySetIterator iterator = params.keySetIterator();
            while (iterator.hasNextKey()) {
                String key = iterator.nextKey();
                switch (key) {
                    case "xpf_type":
                        try {
                            Method setXPFTypeMethod = interfaceClass.getDeclaredMethod("telemetrySetXPFType", Object.class);
                            setXPFTypeMethod.invoke(interfaceObj, params.getString(key));
                        } catch (Exception e) {
                            Log.d("CSLIB", "Exception failure while calling telemetrySetXPFType", e);
                        }
                        break;

                    case "xpf_version":
                        try {
                            Method setXPFVersionMethod = interfaceClass.getDeclaredMethod("telemetrySetXPFVersion", Object.class);
                            setXPFVersionMethod.invoke(interfaceObj, params.getString(key));
                        } catch (Exception e) {
                            Log.d("CSLIB", "Exception failure while calling telemetrySetXPFVersion", e);
                        }
                        break;

                    case "xpf_bridge_version":
                        try {
                            Method setXPFBridgeVersionMethod = interfaceClass.getDeclaredMethod("telemetrySetXPFBridgeVersion", Object.class);
                            setXPFBridgeVersionMethod.invoke(interfaceObj, params.getString(key));
                        } catch (Exception e) {
//                            Log.d("CSLIB", "Exception failure while calling telemetrySetXPFBridgeVersion", e);
                        }
                        // TODO: Uncomment and enable error log when telemetrySetXPFBridgeVersion available on android SDK,
//                        break; // fallthrough into default case, will be tracked as "custom.xpf_bridge_version"

                    default:
                        try {
                            Method telemetryCollectMethod = interfaceClass.getDeclaredMethod("telemetryCollect", String.class, Object.class);
                            telemetryCollectMethod.invoke(interfaceObj, key, params.getString(key));
                        } catch (Exception e) {
                            Log.d("CSLIB", "Exception failure while calling telemetryCollect", e);
                        }
                        break;
                }
            }
        } catch (Exception e) {
            Log.e("CSLIB", "Exception failure while initializing components", e);
            e.printStackTrace();
        }
    }

    /*
     * It will inject the CS JSInterface which will track and handle all the user
     * interaction events on this WebView.
     *
     * @param webViewTag the webView's react tag.
     */
    @ReactMethod
    public void injectWebView(final int webViewTag) {
        mWebViewInjector.injectWebView(mReactContext, webViewTag);
    }

    /**
     * It will remove the previously injected CS JSInterface. If there was no
     * interface
     * <p>
     * <p>
     * * @param webViewTag the webView's react tag.
     */
    @ReactMethod
    public void removeWebViewInjection(final int webViewTag) {
        mWebViewInjector.removeWebViewInjection(mReactContext, webViewTag);
    }

    @Override
    public Map<String, Object> getConstants() {
        final Map<String, Object> constants = new HashMap<>();

        for (Map.Entry entry : Constants.currencies.entrySet()) {
            constants.put((String) entry.getKey(), entry.getValue());
        }
        return constants;
    }

    @ReactMethod
    public void maskView(final int viewTag) {
        mViewMasker.maskView(mReactContext, viewTag);
    }

    @ReactMethod
    public void unmaskView(final int viewTag) {
        mViewMasker.unmaskView(mReactContext, viewTag);
    }

    @ReactMethod
    public void sendUserIdentifier(@NonNull final String userIdentifier) {
        Contentsquare.sendUserIdentifier(userIdentifier);
    }
}
