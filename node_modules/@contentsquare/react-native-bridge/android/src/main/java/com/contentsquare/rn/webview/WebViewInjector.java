package com.contentsquare.rn.webview;

import android.app.Activity;
import android.util.Log;
import android.webkit.WebView;

import androidx.annotation.NonNull;

import com.contentsquare.android.api.CsWebViewManager;
import com.contentsquare.android.R;
import com.contentsquare.rn.utils.ReactNativeUiThreadUtil;
import com.contentsquare.rn.utils.ReactNativeViewFinder;
import com.facebook.react.bridge.Arguments;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.WritableMap;
import com.facebook.react.modules.core.DeviceEventManagerModule;

/**
 * Handle injection and removal of the JS interface in React Native WebViews.
 */
public class WebViewInjector {

    @NonNull
    private final ReactNativeViewFinder mReactNativeViewFinder;

    @NonNull
    private final WebViewInjector.SDKWebViewManager mSDKWebViewManager;

    @NonNull
    private final ReactNativeUiThreadUtil mReactNativeUiThreadUtil;

    public static class SDKWebViewManager {
        public void injectWebView(@NonNull final WebView webView) {
            CsWebViewManager.injectEventTrackingInterface(webView);
        }

        public void removeWebViewInjection(@NonNull final WebView webView) {
            CsWebViewManager.removeEventTrackingInterface(webView);
        }
    }

    /**
     * Constructor.
     *
     * @param reactNativeViewFinder as {@link ReactNativeViewFinder}
     * @param webViewManager        as {@link SDKWebViewManager}
     */
    public WebViewInjector(@NonNull ReactNativeViewFinder reactNativeViewFinder, @NonNull SDKWebViewManager webViewManager, @NonNull ReactNativeUiThreadUtil reactNativeUiThreadUtil) {
        this.mReactNativeViewFinder = reactNativeViewFinder;
        this.mSDKWebViewManager = webViewManager;
        this.mReactNativeUiThreadUtil = reactNativeUiThreadUtil;
    }

    /**
     * inject a javascript interface to a React Native webView.
     *
     * @param reactContext React Native context.
     * @param webViewTag   the webView's react tag.
     */
    public void injectWebView(@NonNull final ReactApplicationContext reactContext, final int webViewTag) {
        mReactNativeUiThreadUtil.runOnUiThread(() -> {
            final Activity activity = reactContext.getCurrentActivity();
            if (activity == null) {
                return;
            }

            mReactNativeViewFinder.findWebView(reactContext, webViewTag, webView -> {
                mSDKWebViewManager.injectWebView(prepareWebView(activity, webView));
                reactContext
                        .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
                        .emit("onCSWebViewInjected", null);
            });
        });
    }

    /**
     * remove a javascript interface from a React Native webView.
     *
     * @param reactContext React Native context.
     * @param webViewTag   the webView's react tag.
     */
    public void removeWebViewInjection(@NonNull final ReactApplicationContext reactContext, final int webViewTag) {
        mReactNativeUiThreadUtil.runOnUiThread(() -> {
            final Activity activity = reactContext.getCurrentActivity();

            if (activity == null) {
                return;
            }

            mReactNativeViewFinder.findWebView(reactContext, webViewTag, webView -> {
                mSDKWebViewManager.removeWebViewInjection(prepareWebView(activity, webView));
            });
        });
    }

    @NonNull
    private WebView prepareWebView(@NonNull final Activity activity, @NonNull final WebView webView) {
        webView.setTag(R.string.contentsquare_react_native_web_view_activity_tag, activity);
        return webView;
    }
}