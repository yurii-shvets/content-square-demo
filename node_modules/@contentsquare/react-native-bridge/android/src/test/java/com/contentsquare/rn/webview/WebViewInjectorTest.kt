package com.contentsquare.rn.webview

import android.app.Activity
import android.webkit.WebView
import androidx.test.ext.junit.runners.AndroidJUnit4
import com.contentsquare.android.R
import com.contentsquare.rn.utils.ReactNativeUiThreadUtil
import com.contentsquare.rn.utils.ReactNativeViewFinder
import com.facebook.react.bridge.ReactApplicationContext
import com.facebook.react.modules.core.DeviceEventManagerModule.RCTDeviceEventEmitter
import io.mockk.*
import org.junit.Assert.assertEquals
import org.junit.Assert.assertNotNull
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith
import org.robolectric.annotation.Config


@RunWith(AndroidJUnit4::class)
@Config(manifest = Config.NONE)
class WebViewInjectorTest {
    // mocks
    private val mockActivity = mockk<Activity>()
    private val mockReactApplicationContext = mockk<ReactApplicationContext>()
    private val mockWebViewTag = 999

    private val webView = mockk<WebView>()

    private val mockReactNativeViewFinder = mockk<ReactNativeViewFinder>()
    private val mockSDKWebViewManager = mockk<WebViewInjector.SDKWebViewManager>()
    private val mockReactNativeUiThreadUtil = mockk<ReactNativeUiThreadUtil>()
    private val mockRCTDeviceEventEmitter = mockk<RCTDeviceEventEmitter>()

    // non-mocks
    private val underTest = WebViewInjector(
        mockReactNativeViewFinder, mockSDKWebViewManager, mockReactNativeUiThreadUtil
    )

    @Before
    fun init() {
        every { mockReactApplicationContext.currentActivity } returns mockActivity

        every {
            mockReactNativeViewFinder.findWebView(
                mockReactApplicationContext, mockWebViewTag, any()
            )
        } returns Unit

        every { mockReactNativeUiThreadUtil.runOnUiThread(any()) } answers {
            (firstArg() as Runnable).run()
        }
    }

    @Test
    fun `Given find webView with react context and webViewTag, When inject JS, Then call SDK with webview and activity in tag`() {

        every {
            webView.setTag(
                R.string.contentsquare_react_native_web_view_activity_tag, mockActivity
            )
        } returns Unit
        every { mockSDKWebViewManager.injectWebView(webView) } just runs
        every {
            mockReactApplicationContext.hint(RCTDeviceEventEmitter::class)
                .getJSModule(RCTDeviceEventEmitter::class.java)
        } returns mockRCTDeviceEventEmitter
        every { mockRCTDeviceEventEmitter.emit(any(), any()) } just runs

        // when
        underTest.injectWebView(mockReactApplicationContext, mockWebViewTag)

        val uiThreadRunnableSlot = slot<Runnable>()
        verify { mockReactNativeUiThreadUtil.runOnUiThread(capture(uiThreadRunnableSlot)) }

        val webViewFoundListenerSlot = slot<ReactNativeViewFinder.OnWebViewFoundListener>()
        verify {
            mockReactNativeViewFinder.findWebView(
                eq(mockReactApplicationContext),
                eq(mockWebViewTag),
                capture(webViewFoundListenerSlot)
            )
        }

        val webViewFoundListener = webViewFoundListenerSlot.captured
        webViewFoundListener.onWebViewFound(webView)

        val webViewSlot = slot<WebView>()
        verify { mockSDKWebViewManager.injectWebView(capture(webViewSlot)) }

        val passedWebview = webViewSlot.captured
        assertEquals(webView, passedWebview)

        // then
        verify {
            webView.setTag(
                R.string.contentsquare_react_native_web_view_activity_tag, mockActivity
            )
        }
        verify { mockRCTDeviceEventEmitter.emit("onCSWebViewInjected", null) }

        val uiThreadRunnable = uiThreadRunnableSlot.captured
        uiThreadRunnable.run()
    }

    @Test
    fun `Given no webView is found, When inject JS, Then dont call SDK`() {
        every { mockReactNativeUiThreadUtil.runOnUiThread(any()) } just Runs

        // when
        underTest.injectWebView(mockReactApplicationContext, mockWebViewTag)

        // then
        verify(exactly = 0) { mockSDKWebViewManager.injectWebView(any()) }

    }

    @Test
    fun `Given find webView with react context and webViewTag, When remove JS, Then call SDK with webview and activity in tag`() {
        every {
            webView.setTag(
                R.string.contentsquare_react_native_web_view_activity_tag, mockActivity
            )
        } returns Unit
        every { mockSDKWebViewManager.removeWebViewInjection(webView) } just runs

        // when
        underTest.removeWebViewInjection(mockReactApplicationContext, mockWebViewTag)

        val uiThreadRunnableSlot = slot<Runnable>()
        verify { mockReactNativeUiThreadUtil.runOnUiThread(capture(uiThreadRunnableSlot)) }

        val webViewFoundListenerSlot = slot<ReactNativeViewFinder.OnWebViewFoundListener>()
        verify {
            mockReactNativeViewFinder.findWebView(
                eq(mockReactApplicationContext),
                eq(mockWebViewTag),
                capture(webViewFoundListenerSlot)
            )
        }

        val webViewFoundListener = webViewFoundListenerSlot.captured
        webViewFoundListener.onWebViewFound(webView)

        val webViewSlot = slot<WebView>()
        verify { mockSDKWebViewManager.removeWebViewInjection(capture(webViewSlot)) }

        val passedWebview = webViewSlot.captured
        assertEquals(webView, passedWebview)

        // then
        verify {
            webView.setTag(
                R.string.contentsquare_react_native_web_view_activity_tag, mockActivity
            )
        }

        val uiThreadRunnable = uiThreadRunnableSlot.captured
        uiThreadRunnable.run()
    }

    @Test
    fun `Given no webView is found, When remove JS, Then dont call SDK`() {
        // when
        underTest.removeWebViewInjection(mockReactApplicationContext, mockWebViewTag)

        val captor = slot<Runnable>()
        verify { mockReactNativeUiThreadUtil.runOnUiThread(capture(captor)) }

        val passedRunnable = captor.captured
        assertNotNull(passedRunnable)

        passedRunnable.run()

        // then
        verify(exactly = 0) { mockSDKWebViewManager.removeWebViewInjection(any()) }
    }
}
