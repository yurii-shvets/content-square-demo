package com.contentsquare.rn

import androidx.test.ext.junit.runners.AndroidJUnit4
import com.contentsquare.rn.webview.WebViewInjector
import com.contentsquare.rn.masking.ViewMasker
import com.facebook.react.bridge.ReactApplicationContext
import org.junit.Test
import org.junit.runner.RunWith
import io.mockk.*
import org.robolectric.annotation.Config

@RunWith(AndroidJUnit4::class)
@Config(manifest = Config.NONE)
class ContentsquareModuleTest {
    // mocks
    private val mockWebViewTag = 999
    private val mockReactApplicationContext = mockk<ReactApplicationContext>()
    private val mockWebViewInjector = mockk<WebViewInjector>()
    private val mockViewMasker = mockk<ViewMasker>()

    @Test
    fun `Given a SDK, When inject, Then should inject JS interface`() {
        every { mockWebViewInjector.injectWebView(any(), any()) } just Runs
        // given
        val module =
            ContentsquareModule(mockReactApplicationContext, mockWebViewInjector, mockViewMasker)

        // when
        module.injectWebView(mockWebViewTag)

        // then
        verify {
            mockWebViewInjector.injectWebView(
                eq(mockReactApplicationContext), eq(mockWebViewTag)
            )
        }
    }

    @Test
    fun `Given a SDK, When remove, Then should remove JS interface`() {
        every { mockWebViewInjector.removeWebViewInjection(any(), any()) } just Runs
        // given
        val module =
            ContentsquareModule(mockReactApplicationContext, mockWebViewInjector, mockViewMasker)

        // when
        module.removeWebViewInjection(mockWebViewTag)

        // then
        verify {
            mockWebViewInjector.removeWebViewInjection(
                eq(mockReactApplicationContext), eq(mockWebViewTag)
            )
        }
    }
}