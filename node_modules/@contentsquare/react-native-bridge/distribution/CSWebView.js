"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CSWebView = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _webView = require("./webView");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var CSWebView = exports.CSWebView = function CSWebView(_ref) {
  var renderWebView = _ref.renderWebView,
    source = _ref.source,
    url = _ref.url;
  var nativeTag = (0, _react.useRef)();
  var injectedWebViewTag = (0, _react.useRef)();
  // TODO: Refactor in next major version
  var constructSource = function constructSource() {
    return url ? {
      uri: url
    } : source;
  };
  var initialSource = _reactNative.Platform.OS === 'ios' ? constructSource() : {};
  var _useState = (0, _react.useState)(initialSource),
    _useState2 = _slicedToArray(_useState, 2),
    currentSource = _useState2[0],
    setCurrentSource = _useState2[1];
  var onTagInjected = function onTagInjected() {
    injectedWebViewTag.current = nativeTag.current;
    setCurrentSource(constructSource());
  };
  (0, _react.useEffect)(function () {
    var onCSWebViewInjectedListener;
    if (_reactNative.Platform.OS === 'android') {
      onCSWebViewInjectedListener = _reactNative.DeviceEventEmitter.addListener('onCSWebViewInjected', function () {
        onTagInjected();
      });
    }
    return function () {
      if (onCSWebViewInjectedListener) {
        onCSWebViewInjectedListener.remove();
      }
      if (injectedWebViewTag.current !== undefined) {
        (0, _webView.removeWebViewInjection)(injectedWebViewTag.current);
      }
    };
  }, []);
  (0, _react.useEffect)(function () {
    if (injectedWebViewTag.current) {
      // Update url only after the webView has been injected
      setCurrentSource(constructSource());
    }
  }, [source, url]);
  var onLayout = function onLayout(event) {
    nativeTag.current = event.nativeEvent.target;
    if (nativeTag.current && nativeTag.current !== injectedWebViewTag.current) {
      (0, _webView.injectWebView)(nativeTag.current);
      if (_reactNative.Platform.OS === 'ios') {
        onTagInjected();
      }
    }
  };
  return /*#__PURE__*/_react["default"].createElement(_reactNative.View, {
    style: {
      flex: 1
    }
  }, url ? renderWebView(onLayout, currentSource === null || currentSource === void 0 ? void 0 : currentSource.uri) : renderWebView(onLayout, currentSource));
};